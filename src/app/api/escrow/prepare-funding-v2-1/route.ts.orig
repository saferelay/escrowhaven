import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { ethers } from 'ethers';
import { getSigner } from '@/lib/blockchain-provider-fixed';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

const FACTORY_V2_1_ABI = [
  "function createEscrow(address clientWallet, address freelancerWallet, uint256 amount) returns (address)",
  "event EscrowCreated(address indexed escrowAddress, address indexed clientWallet, address indexed freelancerWallet, uint256 amount, uint256 timestamp)"
];

export async function POST(request: NextRequest) {
  try {
    const { escrowId } = await request.json();
    
    console.log('=== PREPARE FUNDING V2.1 ===');
    console.log('Escrow ID:', escrowId);
    
    // Get escrow details
    const { data: escrow, error } = await supabase
      .from('escrows')
      .select('*')
      .eq('id', escrowId)
      .single();
      
    if (error || !escrow) {
      return NextResponse.json({ error: 'Escrow not found' }, { status: 404 });
    }
    
    // Check if already deployed
    if (escrow.vault_address) {
      return NextResponse.json({
        success: true,
        vaultAddress: escrow.vault_address,
        message: 'Vault already deployed'
      });
    }
    
    // Get signer
    const signer = await getSigner();
    const factoryAddress = process.env.SAFERELAY_FACTORY_V2_1_ADDRESS!;
    const factory = new ethers.Contract(factoryAddress, FACTORY_V2_1_ABI, signer);
    
    // Deploy the escrow
    const amountInUsdc = ethers.utils.parseUnits((escrow.amount_cents / 100).toString(), 6);
    
    console.log('Deploying V2.1 escrow...');
    console.log('Client wallet:', escrow.client_wallet_address);
    console.log('Freelancer wallet:', escrow.recipient_wallet_address);
    console.log('Amount:', ethers.utils.formatUnits(amountInUsdc, 6), 'USDC');
    
    const tx = await factory.createEscrow(
      escrow.client_wallet_address || ethers.constants.AddressZero,
      escrow.recipient_wallet_address || ethers.constants.AddressZero,
      amountInUsdc
    );
    
    console.log('Transaction sent:', tx.hash);
    const receipt = await tx.wait();
    
    // Get the escrow address from the event
    const event = receipt.events?.find((e: any) => e.event === 'EscrowCreated');
    const escrowAddress = event?.args?.escrowAddress;
    
    console.log('V2.1 Escrow deployed at:', escrowAddress);
    
    // Update database
    await supabase
      .from('escrows')
      .update({
        vault_address: escrowAddress,
        deployment_tx: tx.hash,
        deployed_at: new Date().toISOString(),
        contract_version: 'v2.1'
      })
      .eq('id', escrowId);
    
    return NextResponse.json({
      success: true,
      vaultAddress: escrowAddress,
      txHash: tx.hash,
      message: 'V2.1 escrow deployed successfully'
    });
    
  } catch (error: any) {
    console.error('Deployment error:', error);
    return NextResponse.json({ 
      error: 'Deployment failed',
      details: error.message 
    }, { status: 500 });
  }
}
