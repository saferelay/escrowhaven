'use client';

import { use, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { createClient } from '@supabase/supabase-js';
import Link from 'next/link';
import { getConfig } from '@/lib/config';
// Wallet connection removed - using database wallets

const config = getConfig();
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

import { SettlementActions } from '@/components/SettlementActions';

import { SettlementActions } from '@/components/SettlementActions';

export default function UnifiedEscrowPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params);
  const router = useRouter();
  const { user } = useAuth();
  
  // State
  const [escrow, setEscrow] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [processing, setProcessing] = useState(false);
  const [showDeclineModal, setShowDeclineModal] = useState(false);
  const [declineReason, setDeclineReason] = useState('');
  const [deploymentStatus, setDeploymentStatus] = useState<string>('');
  
  // Fetch escrow data with real-time updates
  useEffect(() => {
    async function fetchEscrow() {
      try {
        // Single table query - much simpler!
        const { data: escrowData, error: escrowError } = await supabase
          .from('escrows')
          .select('*')
          .eq('id', id)
          .single();

        if (escrowData && !escrowError) {
          setEscrow({
            ...escrowData,
            escrow_id: escrowData.id // Ensure backward compatibility
          });
        } else {
          setError('Escrow not found');
        }
      } catch (err) {
        setError('Failed to fetch escrow');
      } finally {
        setLoading(false);
      }
    }

    fetchEscrow();

    // Set up real-time subscription
    const channel = supabase
      .channel('escrow-updates')
      .on('postgres_changes', 
        
        () => fetchEscrow()
      )
      .on('postgres_changes',
        { event: '*', schema: 'public', table: 'escrows' },
        () => fetchEscrow()
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [id]);

  // Determine user role
  const userEmail = user?.email?.toLowerCase();
  const isPayer = userEmail === escrow?.client_email?.toLowerCase();
  const isRecipient = userEmail === escrow?.freelancer_email?.toLowerCase();
  const isParticipant = isPayer || isRecipient;
  const isInitiator = userEmail === escrow?.initiator_email?.toLowerCase();
  const role = isPayer ? 'payer' : isRecipient ? 'recipient' : 'observer';

  // Calculations
  const amountUsd = escrow ? escrow.amount_cents / 100 : 0;

  // Cancellation state
  const iWantCancel = isPayer ? escrow?.payer_wants_cancel : escrow?.recipient_wants_cancel;
  const otherWantsCancel = isPayer ? escrow?.recipient_wants_cancel : escrow?.payer_wants_cancel;
  const bothWantCancel = escrow?.payer_wants_cancel && escrow?.recipient_wants_cancel;

  // Redirect if not authenticated
  useEffect(() => {
    if (!loading && !user) {
      router.push(`/login?redirectTo=/escrow/${id}`);
    }
  }, [loading, user, router, id]);

  // Handlers
  const handleAccept = async () => {
    setProcessing(true);
    try {
      // For recipients, check if we need to update the wallet address
      let updateData: any = {
        status: 'ACCEPTED',
        accepted_at: new Date().toISOString()
      };

      // If recipient is accepting and no wallet address is set, get it from user_wallets
      if (isRecipient && !escrow.recipient_wallet_address) {
        const { data: walletData } = await supabase
          .from('user_wallets')
          .select('wallet_address')
          .eq('email', escrow.freelancer_email.toLowerCase())
          .single();

        if (walletData?.wallet_address) {
          updateData.recipient_wallet_address = walletData.wallet_address;
          console.log('Setting recipient wallet:', walletData.wallet_address);
        }
      }

      const { error } = await supabase
        .from('escrows')
        .update(updateData)
        .eq('id', id);

      if (error) throw error;
      window.location.reload();
    } catch (error: any) {
      console.error('Fund error:', error);
      console.error('Error details:', {
        message: error?.message,
        status: error?.status,
        stack: error?.stack
      });
      
      // Better error message extraction
      let errorMessage = 'Failed to initialize payment';
      
      if (error?.message) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      } else if (error?.error) {
        errorMessage = error.error;
      }
      
      alert(`Error: ${errorMessage}`);
      setProcessing(false);
    }
  };

      const openTransakWidget = (transakParams: any) => {
    try {
      const config = getConfig();
      
      // Get the amount from escrow
      const amountUsd = escrow.amount_cents / 100;
      console.log('Escrow amount needed:', amountUsd);
      
      // Calculate gross amount (add ~3.5% for Transak fees)
      // User needs to pay more so that after fees, the escrow receives the correct amount
      const transakFeePercent = 0.035; // 3.5% average Transak fee
      const grossAmount = (amountUsd / (1 - transakFeePercent)).toFixed(2);
      console.log('Gross amount to charge:', grossAmount);
      
      // Build Transak URL with parameters
      const baseUrl = config.isTestMode 
        ? 'https://global-stg.transak.com' 
        : 'https://global.transak.com';
        
      const params = new URLSearchParams({
        apiKey: config.transak.apiKey || 'c1dfcf5c-8bc2-419c-bf7e-29f1e1831605',
        environment: config.isTestMode ? 'STAGING' : 'PRODUCTION',
        defaultCryptoCurrency: 'USDC',
        cryptoCurrencyCode: 'USDC',
        // CRITICAL: Set to polygon, not ethereum
        defaultNetwork: 'polygon',
        network: 'polygon',
        blockchains: 'polygon',
        walletAddress: escrow.vault_address || escrow.escrow_address || "",
        disableWalletAddressForm: 'true',
        // Set the crypto amount to the exact escrow amount
        cryptoCurrencyAmount: amountUsd.toFixed(2),
        defaultCryptoAmount: amountUsd.toFixed(2),
        // Let Transak calculate the fiat amount based on crypto amount
        productsAvailed: 'BUY',
        exchangeScreenTitle: `Fund SafeRelay Escrow #${escrow.id.slice(0, 8)}`,
        hideMenu: 'true',
        isAutoFillUserData: 'true',
        redirectURL: `${window.location.origin}/escrow/${id}`,
        isFeeCalculationHidden: 'false',
        lockCryptoCurrency: 'true',
        lockNetwork: 'true',
        hideExchangeScreen: 'false',
        isDisableCrypto: 'false'
      });
      
      // Remove any empty parameters
      const cleanParams = new URLSearchParams();
      params.forEach((value, key) => {
        if (value && value !== 'undefined' && value !== 'null') {
          cleanParams.append(key, value);
        }
      });
      
      const transakUrl = `${baseUrl}?${cleanParams.toString()}`;
      console.log('Opening Transak to receive exactly:', amountUsd, 'USDC on Polygon');
      console.log('Full URL:', transakUrl);
      
      // Open in new window
      const transakWindow = window.open(
        transakUrl,
        'transak',
        'width=450,height=700,left=100,top=100'
      );
      
      if (!transakWindow) {
        alert('Please allow popups for this site to complete payment.');
        setProcessing(false);
        return;
      }
      
      // Monitor the window
      const checkInterval = setInterval(() => {
        if (transakWindow.closed) {
          clearInterval(checkInterval);
          setProcessing(false);
          // Check if payment was made
          window.location.reload();
        }
      }, 1000);
      
    } catch (error) {
      console.error('Failed to open Transak:', error);
      alert('Failed to open payment window. Please try again.');
      setProcessing(false);
    }
  };

  const initializeTransak = (transakParams: any) => {
    try {
      console.log('Initializing Transak with params:', transakParams);
      
      const transak = new (window as any).TransakSDK({
        apiKey: config.transak.apiKey || 'c1dfcf5c-8bc2-419c-bf7e-29f1e1831605',
        environment: config.isTestMode ? 'STAGING' : 'PRODUCTION',
        ...transakParams,
        onSuccess: (data: any) => {
          console.log('Transak success:', data);
          alert('Payment successful! The escrow will be updated shortly.');
          window.location.reload();
        },
        onError: (error: any) => {
          console.error('Transak error:', error);
          alert('Payment failed. Please try again.');
          setProcessing(false);
        },
        onClose: () => {
          console.log('Transak widget closed');
          setProcessing(false);
        }
      });

      console.log('Opening Transak widget...');
      transak.init();
    } catch (error) {
      console.error('Failed to initialize Transak:', error);
      alert('Failed to open payment window. Please try again.');
      setProcessing(false);
    }
  };



  const handleApprove = async () => {
    if (!escrow?.id) return;
    
    setProcessing(true);
    try {
      const response = await fetch('/api/escrow/approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          escrowId: escrow.id,
          userEmail: user?.email || (isPayer ? escrow.client_email : escrow.freelancer_email)
        })
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to approve');
      }
      
      if (data.bothApproved) {
        alert('Both parties have approved! Funds will be released automatically.');
      } else {
        alert('Your approval has been recorded. Waiting for the other party.');
      }
      
      // Refresh to show updated status
      window.location.reload();
    } catch (error) {
      console.error('Approval error:', error);
      alert(error.message || 'Failed to approve release');
    } finally {
      setProcessing(false);
    }
  };

  const handleCancelToggle = async () => {
    setProcessing(true);
    try {
      const response = await fetch('/api/escrow/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          escrowId: escrow.escrow_id || escrow.id,
          userEmail: isPayer ? escrow.client_email : escrow.freelancer_email,
          action: iWantCancel ? 'withdraw' : 'request'
        })
      });
      
      if (!response.ok) throw new Error('Failed to update cancellation');
      
      if (!iWantCancel) {
        alert('Cancellation requested. The other party will be notified.');
      } else {
        alert('Cancellation request withdrawn.');
      }
      
      window.location.reload();
    } catch (error) {
      alert('Failed to update cancellation request');
    } finally {
      setProcessing(false);
    }
  };

  // Handle funding with Transak
  const handleFund = async (useTransakOne = false) => {
    if (!escrow || !escrow.recipient_wallet_address) {
      alert('Recipient wallet not set');
      return;
    }

    setProcessing(true);
    try {
      console.log('Preparing funding...', { escrowId: id, useTransakOne });
      
      // Call prepare-funding API
      const response = await fetch('/api/escrow/prepare-funding', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          escrowId: id,
          useTransakOne 
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Prepare funding failed:', errorText);
        
        // Try to parse error message
        let errorMessage = 'Failed to prepare funding';
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.error || errorMessage;
        } catch (e) {
          if (errorText.includes('<!DOCTYPE')) {
            errorMessage = 'Server error: API endpoint not found';
          } else {
            errorMessage = errorText;
          }
        }
        
        throw new Error(errorMessage);
      }

      const data = await response.json();
      console.log('Prepare funding response:', data);

      if (data.vaultAddress && !escrow.vault_address) {
        // Update local state with vault address
        setEscrow((prev: any) => ({ ...prev, vault_address: data.vaultAddress }));
      }

      // For test mode with traditional flow
      if (config.isTestMode && !useTransakOne && data.vaultAddress) {
        setDeploymentStatus('Vault deployed! You can now manually send USDC to: ' + data.vaultAddress);
        alert('Vault deployed at: ' + data.vaultAddress + '\n\nYou can now send Mock USDC to this address.');
        return;
      }

      // Open Transak widget
      if (data.transakParams) {
        openTransakWidget(data.transakParams);
      } else {
        throw new Error('No Transak parameters received');
      }

    } catch (error: any) {
      console.error('Fund error:', error);
      alert('Error: ' + (error.message || 'Failed to initialize payment'));
    } finally {
      setProcessing(false);
    }
  };

  // Handle decline
  const handleDecline = async () => {
    if (!declineReason.trim()) return;

    setProcessing(true);
    try {
      const { error } = await supabase
        .from('escrows')
        .update({
          status: 'DECLINED',
          declined_at: new Date().toISOString(),
          declined_reason: declineReason.trim()
        })
        .eq('id', id);

      if (error) throw error;
      
      alert('Escrow declined successfully');
      setShowDeclineModal(false);
      window.location.reload();
    } catch (error) {
      console.error('Decline error:', error);
      alert('Failed to decline escrow');
    } finally {
      setProcessing(false);
    }
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading escrow...</p>
        </div>
      </div>
    );
  }

  // Error state
  if (error || !escrow) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Escrow Not Found</h1>
          <p className="text-gray-600 mb-4">{error || 'The escrow you are looking for does not exist.'}</p>
          <Link href="/dashboard" className="text-blue-600 hover:underline">
            Return to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  // Main render
  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4">
      <div className="max-w-2xl mx-auto">
        {/* Test mode banner */}
        {config.isTestMode && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <p className="text-sm font-medium text-yellow-800">Test Mode Active</p>
            <p className="text-xs text-yellow-700">Using test network • Transactions are not real</p>
          </div>
        )}

        <div className="bg-white rounded-lg shadow-lg p-8">
          {/* INITIATED Status */}
          {escrow.status === 'INITIATED' && (
            <div className="text-center">
              {!isInitiator ? (
                <>
                  <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-3xl">📨</span>
                  </div>
                  <h1 className="text-2xl font-bold mb-2">Escrow Invitation</h1>
                  <p className="text-gray-600 mb-8">{escrow.initiator_email} invited you to an escrow agreement</p>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
                    <div className="text-3xl font-bold text-blue-600 mb-2">${amountUsd.toFixed(2)}</div>
                    <p className="text-sm text-gray-600">Your role: <span className="font-semibold">{role}</span></p>
                  </div>
                  
                  {isRecipient && escrow.initiator_role === 'payer' && !escrow.recipient_wallet_address && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                      <p className="text-sm text-yellow-800 font-medium mb-2">
                        ⚠️ Payment Setup Required
                      </p>
                      <p className="text-sm text-yellow-700">
                        As the recipient, funds will be sent to your registered SafeRelay wallet when you accept.
                      </p>
                    </div>
                  )}
                  
                  <div className="flex gap-4">
                    <button
                      onClick={() => setShowDeclineModal(true)}
                      disabled={processing}
                      className="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 disabled:opacity-50"
                    >
                      Decline
                    </button>
                    <button
                      onClick={handleAccept}
                      disabled={processing}
                      className="flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50"
                    >
                      {processing ? 'Processing...' : 'Accept'}
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <div className="w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <span className="text-3xl">⏳</span>
                  </div>
                  <h1 className="text-2xl font-bold mb-2">Waiting for Acceptance</h1>
                  <p className="text-gray-600">
                    Waiting for {escrow.initiator_role === 'payer' ? escrow.freelancer_email : escrow.client_email} to accept
                  </p>
                </>
              )}
            </div>
          )}

          {/* ACCEPTED Status */}
          {escrow.status === 'ACCEPTED' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">{isPayer ? '💳' : '⏳'}</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">
                {isPayer ? 'Ready to Fund Escrow' : 'Waiting for Payment'}
              </h1>
              <p className="text-gray-600 mb-8">
                {isPayer ? 'Both parties have accepted. You can now fund the escrow.' : `Waiting for ${escrow.client_email} to fund the escrow.`}
              </p>

              {isPayer && !escrow.recipient_wallet_address && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
                  <div className="flex items-start gap-3">
                    <span className="text-2xl">⚠️</span>
                    <div className="text-left">
                      <h3 className="font-semibold text-yellow-800 mb-2">Recipient Wallet Not Connected</h3>
                      <p className="text-sm text-yellow-700">
                        The recipient needs to accept this escrow before you can fund it.
                        We've notified {escrow.freelancer_email} to complete their wallet setup.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {isPayer && escrow.recipient_wallet_address && (
                <>
                  <div className="bg-gray-50 rounded-lg p-6 mb-6">
                    <div className="text-center">
                      <p className="text-sm text-gray-600 mb-2">Escrow Amount</p>
                      <p className="text-4xl font-bold text-gray-900">${amountUsd.toFixed(2)}</p>
                      
                      <div className="mt-4 space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Recipient will receive (98.01%):</span>
                          <span className="font-semibold">${(amountUsd * 0.9801).toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Platform fee (1.99%):</span>
                          <span className="font-semibold">${(amountUsd * 0.0199).toFixed(2)}</span>
                        </div>
                        <div className="border-t pt-2 mt-2">
                          <div className="flex justify-between">
                            <span className="text-gray-600">Estimated total with Transak fees (~3.5%):</span>
                            <span className="font-semibold">${(amountUsd * 1.035).toFixed(2)}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <button
                    onClick={() => handleFund(!config.isTestMode)} // Use Transak One in production
                    disabled={processing || !escrow.recipient_wallet_address}
                    className="w-full bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 transition-colors font-semibold"
                  >
                    {processing ? 'Preparing...' : 'Fund with Card/Bank'}
                  </button>
                  
                  {/* Show traditional option only in test mode for debugging */}
                  {config.isTestMode && (
                    <div className="mt-2">
                      <button
                        onClick={() => handleFund(false)}
                        className="text-sm text-gray-500 hover:underline"
                      >
                        Use traditional flow (debug)
                      </button>
                    </div>
                  )}

                  <p className="text-xs text-gray-500 text-center mt-4">
                    You'll be redirected to Transak to complete payment. The escrow vault will be created and funded in one transaction.
                  </p>
                  
                  {deploymentStatus && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <p className="text-sm text-blue-800">{deploymentStatus}</p>
                    </div>
                  )}
                  
                  {escrow.vault_address && (
                    <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                      <p className="text-sm text-green-800">
                        <strong>Vault Address:</strong> {escrow.vault_address}
                        <button
                          onClick={() => navigator.clipboard.writeText(escrow.vault_address)}
                          className="ml-2 text-green-600 hover:underline"
                        >
                          Copy
                        </button>
                      </p>
                    </div>
                  )}
                </>
              )}

              {!isPayer && (
                <div className="space-y-6">
                  <div className="bg-gray-50 rounded-lg p-6">
                    <h3 className="font-semibold mb-4">What happens next?</h3>
                    <div className="space-y-3">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center text-sm font-semibold">1</div>
                        <div className="text-left">
                          <p className="font-medium">Payer funds the escrow</p>
                          <p className="text-sm text-gray-600">Using their card or bank account via Transak</p>
                        </div>
                      </div>
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center text-sm font-semibold">2</div>
                        <div className="text-left">
                          <p className="font-medium">Smart contract is created</p>
                          <p className="text-sm text-gray-600">Funds are locked in the escrow vault</p>
                        </div>
                      </div>
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 rounded-full bg-gray-200 text-gray-600 flex items-center justify-center text-sm font-semibold">3</div>
                        <div className="text-left">
                          <p className="font-medium">Both parties approve release</p>
                          <p className="text-sm text-gray-600">Once work is complete and verified</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {escrow.recipient_wallet_address && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <p className="text-sm text-blue-800">
                        <strong>Payment destination:</strong> Funds will be sent to your SafeRelay wallet ending in ...{escrow.recipient_wallet_address.slice(-6)}
                      </p>
                    </div>
                  )}
                </div>
              )}
            
                  
                  {/* Test Mode: Show vault address for manual testing */}
                  {config.isTestMode && escrow.vault_address && (
                    <div className="mt-6 p-4 bg-yellow-50 border-2 border-yellow-200 rounded-lg">
                      <div className="flex items-start gap-2">
                        <span className="text-yellow-600 text-lg">🧪</span>
                        <div className="flex-1">
                          <h4 className="font-semibold text-yellow-800 mb-1">Test Mode - Vault Address</h4>
                          <p className="text-sm text-yellow-700 mb-2">
                            For testing, you can manually send Mock USDC to this vault:
                          </p>
                          <div className="bg-white p-3 rounded border border-yellow-300">
                            <code className="text-xs text-gray-800 break-all">{escrow.vault_address}</code>
                            <button
                              onClick={() => {
                                navigator.clipboard.writeText(escrow.vault_address);
                                alert('Vault address copied to clipboard!');
                              }}
                              className="mt-2 text-xs text-yellow-700 hover:text-yellow-800 underline"
                            >
                              Copy Address
                            </button>
                          </div>
                          <p className="text-xs text-yellow-600 mt-2">
                            Mock USDC Contract: {config.usdc.address}
                          </p>
                          <a 
                            href={`https://amoy.polygonscan.com/address/${escrow.vault_address}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-xs text-yellow-700 hover:text-yellow-800 underline mt-1 inline-block"
                          >
                            View on PolygonScan →
                          </a>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* Test Mode: Show vault address for manual testing */}
                  {config.isTestMode && escrow.vault_address && (
                    <div className="mt-6 p-4 bg-yellow-50 border-2 border-yellow-200 rounded-lg">
                      <div className="flex items-start gap-2">
                        <span className="text-yellow-600 text-lg">🧪</span>
                        <div className="flex-1">
                          <h4 className="font-semibold text-yellow-800 mb-1">Test Mode - Vault Address</h4>
                          <p className="text-sm text-yellow-700 mb-2">
                            For testing, you can manually send Mock USDC to this vault:
                          </p>
                          <div className="bg-white p-3 rounded border border-yellow-300">
                            <code className="text-xs text-gray-800 break-all">{escrow.vault_address}</code>
                            <button
                              onClick={() => {
                                navigator.clipboard.writeText(escrow.vault_address);
                                alert('Vault address copied to clipboard!');
                              }}
                              className="mt-2 text-xs text-yellow-700 hover:text-yellow-800 underline"
                            >
                              Copy Address
                            </button>
                          </div>
                          <p className="text-xs text-yellow-600 mt-2">
                            Mock USDC Contract: {config.usdc.address}
                          </p>
                          <a 
                            href={`https://amoy.polygonscan.com/address/${escrow.vault_address}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-xs text-yellow-700 hover:text-yellow-800 underline mt-1 inline-block"
                          >
                            View on PolygonScan →
                          </a>
                        </div>
                      </div>
                    </div>
                  )}</div>
          )}

          {/* FUNDED Status */}
          {escrow.status === 'FUNDED' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🔒</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Escrow Active</h1>
              <p className="text-gray-600 mb-8">Funds are secured in the smart contract</p>
              
              <div className="bg-gray-50 rounded-lg p-6 mb-6">
                <div className="text-3xl font-bold mb-4">${amountUsd.toFixed(2)}</div>
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <p className="text-sm text-gray-600">Payer</p>
                    <p className="font-semibold">{escrow.client_approved ? '✅ Approved' : '⏳ Pending'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Recipient</p>
                    <p className="font-semibold">{escrow.freelancer_approved ? '✅ Approved' : '⏳ Pending'}</p>
                  </div>
                </div>

                {(escrow.client_approved && escrow.freelancer_approved) && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <p className="text-sm text-green-800">
                      Both parties approved! Funds will be released automatically.
                    </p>
                  </div>
                )}
              </div>

              {/* Cancellation Warning */}
              {otherWantsCancel && !iWantCancel && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                  <p className="text-sm text-yellow-800">
                    ⚠️ The other party has requested cancellation. 
                    If you agree, the funds will be returned to the payer.
                  </p>
                </div>
              )}
              
              {bothWantCancel && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <p className="text-sm font-semibold text-red-800">
                    Both parties have agreed to cancel. Processing refund...
                  </p>
                </div>
              )}

              {isParticipant && !bothWantCancel && (
                <>
                  {!(isPayer ? escrow.client_approved : escrow.freelancer_approved) && (
                    <button
                      onClick={handleApprove}
                      disabled={processing}
                      className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 disabled:bg-gray-400 mb-4"
                    >
                      {processing ? 'Processing...' : 'Approve Release'}
                    </button>
                  )}
                  
                  <button
                    onClick={handleCancelToggle}
                    disabled={processing}
                    className={`w-full py-3 rounded-lg transition-colors font-medium ${
                      iWantCancel 
                        ? 'bg-gray-600 text-white hover:bg-gray-700' 
                        : 'bg-red-600 text-white hover:bg-red-700'
                    } disabled:bg-gray-400`}
                  >
                    {processing ? 'Processing...' : (
                      iWantCancel ? 'Withdraw Cancellation Request' : 'Request Cancellation'
                    )}
                  </button>
                  
                  {iWantCancel && !otherWantsCancel && (
                    <p className="text-sm text-gray-600 mt-2">
                      Waiting for the other party to agree to cancellation...
                    </p>
                  )}
                </>
              )}

              {escrow.vault_address && (
                <div className="mt-6 text-sm text-gray-600">
                  
                    <a

                  
                      href={`${config.blockExplorer}/address/${escrow.vault_address}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:underline"
                  >
                    View on blockchain →
                  </a>
                </div>
              )}
            </div>
          )}

          {/* RELEASED Status */}
          {escrow.status === 'RELEASED' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🔒</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Escrow Completed</h1>
              <p className="text-gray-600 mb-8">Funds have been successfully released</p>
              
              <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
                <div className="text-3xl font-bold text-green-600 mb-2">${amountUsd.toFixed(2)}</div>
                <p className="text-sm text-gray-600">Released to {escrow.freelancer_email}</p>
              </div>

              <div className="space-y-2 text-sm text-gray-600">
                {escrow.release_tx_hash && (
                  <div>
                    
                      <a

                    
                        href={`${config.blockExplorer}/tx/${escrow.release_tx_hash}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:underline"
                    >
                      View release transaction →
                    </a>
                  </div>
                )}
                {escrow.released_at && (
                  <div>Released on {new Date(escrow.released_at).toLocaleDateString()}</div>
                )}
              </div>
            </div>
          )}

          {/* DECLINED Status */}
          {escrow.status === 'DECLINED' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">❌</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Escrow Declined</h1>
              <p className="text-gray-600 mb-8">This escrow was declined</p>
              
              {escrow.declined_reason && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                  <p className="text-sm text-red-800">
                    <strong>Reason:</strong> {escrow.declined_reason}
                  </p>
                </div>
              )}

              <Link
                href="/escrow/new"
                className="inline-block bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700"
              >
                Create New Escrow
              </Link>
            </div>
          )}

          {/* CANCELLED Status */}
          {escrow.status === 'CANCELLED' && (
            <div className="text-center">
              <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-3xl">🔄</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Escrow Cancelled</h1>
              <p className="text-gray-600 mb-8">This escrow was cancelled by mutual agreement</p>
              
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-6 mb-6">
                <div className="text-2xl font-bold text-gray-700 mb-2">${amountUsd.toFixed(2)}</div>
                <p className="text-sm text-gray-600">Refunded to {escrow.client_email}</p>
              </div>

              {escrow.cancellation_tx_hash && (
                <div className="mb-6">
                  
                    <a

                  
                      href={`${config.blockExplorer}/tx/${escrow.cancellation_tx_hash}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-sm text-blue-600 hover:underline"
                  >
                    View cancellation transaction →
                  </a>
                </div>
              )}

              {escrow.cancelled_at && (
                <p className="text-sm text-gray-600 mb-6">
                  Cancelled on {new Date(escrow.cancelled_at).toLocaleDateString()}
                </p>
              )}

              <Link
                href="/escrow/new"
                className="inline-block bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700"
              >
                Create New Escrow
              </Link>
            </div>
          )}
        </div>

        <div className="mt-8 text-center">
          <Link href="/dashboard" className="text-gray-600 hover:text-gray-800">
            ← Back to Dashboard
          </Link>
        </div>
      </div>

      {/* Decline Modal */}
      {showDeclineModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h2 className="text-xl font-bold mb-4">Decline Escrow</h2>
            <p className="text-gray-600 mb-4">Please provide a reason for declining:</p>
            <textarea
              value={declineReason}
              onChange={(e) => setDeclineReason(e.target.value)}
              className="w-full p-3 border rounded-lg mb-4"
              rows={3}
              placeholder="Enter reason..."
            />
            <div className="flex gap-4">
              <button
                onClick={() => setShowDeclineModal(false)}
                className="flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-400"
              >
                Cancel
              </button>
              <button
                onClick={handleDecline}
                disabled={processing || !declineReason.trim()}
                className="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 disabled:opacity-50"
              >
                {processing ? 'Declining...' : 'Decline'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}