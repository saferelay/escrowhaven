'use client';

import { use, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { createClient } from '@supabase/supabase-js';
import Link from 'next/link';
import { SettlementActions } from '@/components/SettlementActions';
import { statusConfig } from '@/lib/design-system';
import { Icon, Icons } from '@/components/icons';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface Escrow {
  id: string;
  amount_cents: number;
  amount_remaining_cents?: number;
  client_email: string;
  freelancer_email: string;
  status: string;
  created_at: string;
  vault_address?: string;
  client_approved?: boolean;
  freelancer_approved?: boolean;
  settlement_proposed_by?: string;
  settlement_amount_cents?: number;
  settlement_reason?: string;
  description?: string;
  funded_at?: string;
  released_at?: string;
  declined_at?: string;
  declined_reason?: string;
  declined_by?: string;
  initiator_email?: string;
  initiator_role?: string;
}

export default function EscrowPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params);
  const router = useRouter();
  const { user } = useAuth();
  const [escrow, setEscrow] = useState<Escrow | null>(null);
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(false);
  const [showDeclineForm, setShowDeclineForm] = useState(false);
  const [declineReason, setDeclineReason] = useState('');

  const role = user?.email === escrow?.client_email ? 'payer' : 
               user?.email === escrow?.freelancer_email ? 'recipient' : 
               null;

  // For INITIATED status, determine who initiated and who needs to accept
  const isInitiator = escrow?.status === 'INITIATED' && 
    user?.email === escrow?.initiator_email;

  const needsToAccept = escrow?.status === 'INITIATED' && 
    !isInitiator && (role === 'payer' || role === 'recipient');

  useEffect(() => {
    if (!user) {
      router.push(`/login?redirectTo=/escrow/${id}`);
      return;
    }
    fetchEscrow();

    const channel = supabase
      .channel(`escrow-${id}`)
      .on('postgres_changes',
        { event: '*', schema: 'public', table: 'escrows', filter: `id=eq.${id}` },
        () => fetchEscrow()
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user, router, id]);

  const fetchEscrow = async () => {
    try {
      const { data, error } = await supabase
        .from('escrows')
        .select('*')
        .eq('id', id)
        .single();

      if (error) throw error;
      setEscrow(data);
    } catch (error) {
      console.error('Error fetching escrow:', error);
    } finally {
      setLoading(false);
    }
  };

    const handleAccept = async () => {
    setProcessing(true);
    try {
      console.log('Accept clicked by:', user?.email, 'with role:', role);
      
      // Update the appropriate approval field
      const updateData: any = {};
      
      if (role === 'payer') {
        updateData.client_approved = true;
      } else if (role === 'recipient') {
        updateData.freelancer_approved = true;
      }

      // Since initiator already approved when creating, accepting means both approved
      // So we can directly set status to ACCEPTED
      updateData.status = 'ACCEPTED';

      console.log('Updating escrow with:', updateData);

      const { data, error } = await supabase
        .from('escrows')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Update error:', error);
        throw error;
      }

      console.log('Update successful:', data);
      
      await fetchEscrow();
    } catch (error) {
      console.error('Accept failed:', error);
      alert('Failed to accept. Please try again.');
    } finally {
      setProcessing(false);
    }
  };


  const handleDecline = async () => {
    if (!declineReason.trim()) {
      alert('Please provide a reason for declining');
      return;
    }
    
    setProcessing(true);
    try {
      const { error } = await supabase
        .from('escrows')
        .update({
          status: 'DECLINED',
          declined_at: new Date().toISOString(),
          declined_reason: declineReason,
          declined_by: user?.email
        })
        .eq('id', id);

      if (error) throw error;
      
      setShowDeclineForm(false);
      await fetchEscrow();
    } catch (error) {
      console.error('Decline failed:', error);
      alert('Failed to decline. Please try again.');
    } finally {
      setProcessing(false);
    }
  };

  const handleFund = () => {
    // Redirect to funding page or open Transak widget
    router.push(`/escrow/${escrow?.id}/fund`);
  };

  const handleSettlementAction = async (action: any) => {
    setProcessing(true);
    try {
      const response = await fetch('/api/escrow/settlement', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          escrowId: escrow?.id,
          action: action,
          userEmail: user?.email
        })
      });
      
      if (!response.ok) throw new Error('Action failed');
      
      await fetchEscrow();
    } catch (error) {
      console.error('Settlement action failed:', error);
      alert('Action failed. Please try again.');
    } finally {
      setProcessing(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!escrow || !role) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Payment Not Found</h1>
          <p className="text-gray-600 mb-4">This payment doesn't exist or you don't have access to it.</p>
          <Link href="/dashboard" className="text-blue-600 hover:underline">
            Return to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  const amountUsd = escrow.amount_cents / 100;
  const status = statusConfig[escrow.status as keyof typeof statusConfig] || statusConfig.INITIATED;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Link href="/dashboard" className="flex items-center space-x-2 text-gray-600 hover:text-gray-900">
              <Icon name="back" />
              <span>Back to Dashboard</span>
            </Link>
            <div className="text-sm text-gray-500">
              Payment #{escrow.id.slice(0, 8)}
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Status Overview */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center space-x-4">
              <div className={`w-16 h-16 rounded-2xl flex items-center justify-center
                ${status.color === 'success' ? 'bg-green-100' : ''}
                ${status.color === 'warning' ? 'bg-amber-100' : ''}
                ${status.color === 'primary' ? 'bg-blue-100' : ''}
                ${status.color === 'error' ? 'bg-red-100' : ''}
                ${status.color === 'gray' ? 'bg-gray-100' : ''}
              `}>
                <span className={`
                  ${status.color === 'success' ? 'text-green-600' : ''}
                  ${status.color === 'warning' ? 'text-amber-600' : ''}
                  ${status.color === 'primary' ? 'text-blue-600' : ''}
                  ${status.color === 'error' ? 'text-red-600' : ''}
                  ${status.color === 'gray' ? 'text-gray-600' : ''}
                `}>
                  <Icon name={status.icon as keyof typeof Icons} className="w-8 h-8" />
                </span>
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  ${amountUsd.toFixed(2)} Payment
                </h1>
                <p className={`text-lg font-medium
                  ${status.color === 'success' ? 'text-green-700' : ''}
                  ${status.color === 'warning' ? 'text-amber-700' : ''}
                  ${status.color === 'primary' ? 'text-blue-700' : ''}
                  ${status.color === 'error' ? 'text-red-700' : ''}
                  ${status.color === 'gray' ? 'text-gray-700' : ''}
                `}>
                  {status.label}
                </p>
              </div>
            </div>
            <div className={`px-3 py-1.5 rounded-full text-sm font-medium
              ${role === 'payer' ? 'bg-purple-100 text-purple-700' : 'bg-green-100 text-green-700'}
            `}>
              You're {role === 'payer' ? 'paying' : 'receiving'}
            </div>
          </div>

          {/* Progress Timeline */}
          <div className="relative">
            <div className="absolute left-6 top-8 bottom-0 w-0.5 bg-gray-200"></div>
            <div className="space-y-6">
              {/* Created */}
              <div className="flex items-start space-x-4">
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center relative z-10">
                  <Icon name="check" className="w-6 h-6 text-green-600" />
                </div>
                <div className="flex-1">
                  <p className="font-medium text-gray-900">Payment Created</p>
                  <p className="text-sm text-gray-600">{new Date(escrow.created_at).toLocaleDateString()}</p>
                </div>
              </div>

              {/* Accepted/Declined */}
              {escrow.status !== 'INITIATED' && (
                <div className="flex items-start space-x-4">
                  <div className={`w-12 h-12 rounded-full flex items-center justify-center relative z-10
                    ${escrow.status === 'DECLINED' ? 'bg-red-100' : 'bg-green-100'}
                  `}>
                    {escrow.status === 'DECLINED' ? (
                      <Icon name="x" className="w-6 h-6 text-red-600" />
                    ) : (
                      <Icon name="check" className="w-6 h-6 text-green-600" />
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="font-medium text-gray-900">
                      {escrow.status === 'DECLINED' ? 'Payment Declined' : 'Payment Accepted'}
                    </p>
                    <p className="text-sm text-gray-600">
                      {escrow.status === 'DECLINED' && escrow.declined_reason 
                        ? `Reason: ${escrow.declined_reason}`
                        : 'Both parties agreed to proceed'}
                    </p>
                  </div>
                </div>
              )}

              {/* Funded */}
              <div className="flex items-start space-x-4">
                <div className={`w-12 h-12 rounded-full flex items-center justify-center relative z-10
                  ${['FUNDED', 'RELEASED', 'REFUNDED'].includes(escrow.status) ? 'bg-green-100' : 'bg-gray-100'}
                `}>
                  {['FUNDED', 'RELEASED', 'REFUNDED'].includes(escrow.status) ? (
                    <Icon name="check" className="w-6 h-6 text-green-600" />
                  ) : (
                    <span className="w-3 h-3 bg-gray-300 rounded-full"></span>
                  )}
                </div>
                <div className="flex-1">
                  <p className="font-medium text-gray-900">Payment Secured</p>
                  <p className="text-sm text-gray-600">
                    {['FUNDED', 'RELEASED', 'REFUNDED'].includes(escrow.status) 
                      ? `Funds locked in escrow${escrow.funded_at ? ' on ' + new Date(escrow.funded_at).toLocaleDateString() : ''}`
                      : 'Waiting for funds'}
                  </p>
                </div>
              </div>

              {/* Released */}
              <div className="flex items-start space-x-4">
                <div className={`w-12 h-12 rounded-full flex items-center justify-center relative z-10
                  ${escrow.status === 'RELEASED' ? 'bg-green-100' : 'bg-gray-100'}
                `}>
                  {escrow.status === 'RELEASED' ? (
                    <Icon name="check" className="w-6 h-6 text-green-600" />
                  ) : (
                    <span className="w-3 h-3 bg-gray-300 rounded-full"></span>
                  )}
                </div>
                <div className="flex-1">
                  <p className="font-medium text-gray-900">Payment Complete</p>
                  <p className="text-sm text-gray-600">
                    {escrow.status === 'RELEASED' 
                      ? `Funds delivered${escrow.released_at ? ' on ' + new Date(escrow.released_at).toLocaleDateString() : ''}`
                      : 'Pending completion'}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Payment Details */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Payment Details</h2>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <p className="text-sm text-gray-600 mb-1">Payer</p>
              <p className="font-medium text-gray-900">{escrow.client_email}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600 mb-1">Recipient</p>
              <p className="font-medium text-gray-900">{escrow.freelancer_email}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600 mb-1">Amount</p>
              <p className="font-medium text-gray-900">${amountUsd.toFixed(2)}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600 mb-1">Created</p>
              <p className="font-medium text-gray-900">{new Date(escrow.created_at).toLocaleDateString()}</p>
            </div>
            {escrow.description && (
              <div className="md:col-span-2">
                <p className="text-sm text-gray-600 mb-1">Description</p>
                <p className="font-medium text-gray-900">{escrow.description}</p>
              </div>
            )}
          </div>
        </div>

        {/* Action Section - Different based on status */}
        {escrow.status === 'INITIATED' && needsToAccept && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              You've Been Invited to a Protected Payment
            </h2>
            <p className="text-gray-600 mb-6">
              {role === 'payer' 
                ? `${escrow.freelancer_email} is requesting a payment of $${amountUsd.toFixed(2)}. Review the details and decide whether to proceed.`
                : `${escrow.client_email} wants to send you a payment of $${amountUsd.toFixed(2)}. Accept to proceed with the protected transaction.`
              }
            </p>
            
            {!showDeclineForm ? (
              <div className="flex gap-4">
                <button
                  onClick={handleAccept}
                  disabled={processing}
                  className="flex-1 bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 font-medium disabled:opacity-50 transition-colors flex items-center justify-center space-x-2"
                >
                  <Icon name="check" />
                  <span>Accept & Continue</span>
                </button>
                <button
                  onClick={() => setShowDeclineForm(true)}
                  disabled={processing}
                  className="flex-1 bg-white text-gray-700 py-3 px-6 rounded-lg border-2 border-gray-300 hover:border-gray-400 font-medium disabled:opacity-50 transition-colors"
                >
                  Decline
                </button>
              </div>
            ) : (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Reason for declining (required)
                  </label>
                  <textarea
                    value={declineReason}
                    onChange={(e) => setDeclineReason(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows={3}
                    placeholder="Please explain why you're declining this payment..."
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={handleDecline}
                    disabled={processing || !declineReason.trim()}
                    className="flex-1 bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 font-medium disabled:opacity-50 transition-colors"
                  >
                    Confirm Decline
                  </button>
                  <button
                    onClick={() => {
                      setShowDeclineForm(false);
                      setDeclineReason('');
                    }}
                    disabled={processing}
                    className="flex-1 bg-gray-100 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-200 font-medium disabled:opacity-50 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {escrow.status === 'INITIATED' && isInitiator && (
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-6">
            <div className="flex items-start space-x-3">
              <Icon name="clock" className="w-6 h-6 text-amber-600 mt-0.5" />
              <div>
                <h3 className="font-semibold text-gray-900 mb-1">Waiting for Response</h3>
                <p className="text-gray-700">
                  You've sent a payment invitation to {role === 'payer' ? escrow.freelancer_email : escrow.client_email}.
                  They'll receive an email to review and accept the payment terms.
                </p>
              </div>
            </div>
          </div>
        )}

        {escrow.status === 'ACCEPTED' && role === 'payer' && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Ready to Fund</h2>
            <p className="text-gray-600 mb-6">
              Both parties have agreed to the payment terms. Add funds to secure the payment in escrow.
            </p>
            <button
              onClick={handleFund}
              disabled={processing}
              className="w-full bg-blue-600 text-white py-4 rounded-lg hover:bg-blue-700 font-medium disabled:opacity-50 transition-colors flex items-center justify-center space-x-2"
            >
              <Icon name="pay" />
              <span>Fund Payment</span>
            </button>
          </div>
        )}

        {escrow.status === 'ACCEPTED' && role === 'recipient' && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
            <div className="flex items-start space-x-3">
              <Icon name="clock" className="w-6 h-6 text-blue-600 mt-0.5" />
              <div>
                <h3 className="font-semibold text-gray-900 mb-1">Waiting for Payment</h3>
                <p className="text-gray-700">
                  The payer needs to add funds to the escrow. You'll be notified once the payment is secured.
                </p>
              </div>
            </div>
          </div>
        )}

        {escrow.status === 'FUNDED' && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">
              {role === 'payer' ? 'Review & Approve' : 'Awaiting Payment Decision'}
            </h2>
            
            {role === 'payer' ? (
              <div>
                <p className="text-gray-600 mb-6">
                  The funds are secured. Review the work and decide how to proceed.
                </p>
                <SettlementActions 
                  escrow={escrow}
                  userRole={role}
                  onAction={handleSettlementAction}
                />
              </div>
            ) : (
              <div>
                <p className="text-gray-600 mb-6">
                  Payment is secured and waiting for the payer's decision. You can propose adjustments if needed.
                </p>
                <SettlementActions 
                  escrow={escrow}
                  userRole={role}
                  onAction={handleSettlementAction}
                />
              </div>
            )}
          </div>
        )}

        {escrow.status === 'RELEASED' && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Icon name="check" className="w-8 h-8 text-green-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Payment Complete!</h3>
            <p className="text-gray-600">
              The payment of ${amountUsd.toFixed(2)} has been successfully released.
            </p>
          </div>
        )}

        {escrow.status === 'DECLINED' && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Icon name="x" className="w-8 h-8 text-red-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Payment Declined</h3>
            <p className="text-gray-600">
              This payment invitation was declined.
              {escrow.declined_reason && (
                <span className="block mt-2 text-sm">
                  Reason: {escrow.declined_reason}
                </span>
              )}
            </p>
          </div>
        )}

        {/* Trust & Security */}
        <div className="mt-8 bg-blue-50 rounded-lg p-4 flex items-start space-x-3">
          <Icon name="shield" className="w-5 h-5 text-blue-600 mt-0.5" />
          <div className="text-sm text-blue-800">
            <p className="font-medium mb-1">Your payment is protected</p>
            <p className="text-blue-700">
              Funds are secured by smart contracts and can only be released according to the agreement.
              SafeRelay never has access to your money.
            </p>
          </div>
        </div>
      </main>
    </div>
  );
}